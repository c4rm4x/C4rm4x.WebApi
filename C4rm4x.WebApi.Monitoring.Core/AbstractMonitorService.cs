#region Using

using C4rm4x.Tools.Utilities;
using System.Threading.Tasks;

#endregion

namespace C4rm4x.WebApi.Monitoring.Core
{
    /// <summary>
    /// Basic implementation of IMonitorService
    /// </summary>
    /// <typeparam name="TMonitor">The type of the result generated by the service</typeparam>
    public abstract class AbstractMonitorService<TMonitor> :
        IMonitorService<TMonitor>
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="componentIdentifier">The component's identifier</param>
        /// <param name="componentName">The component's name</param>
        public AbstractMonitorService(
            object componentIdentifier,
            string componentName)
        {
            componentIdentifier.NotNull(nameof(componentIdentifier));
            componentName.NotNullOrEmpty(nameof(componentName));

            ComponentIdentifier = componentIdentifier;
            ComponentName = componentName;
        }

        /// <summary>
        /// The component's identifier which this service is responsible for
        /// </summary>
        public object ComponentIdentifier { get; private set; }

        /// <summary>
        /// The component's name with this service is responsible for
        /// </summary>
        public string ComponentName { get; private set; }

        /// <summary>
        /// Performs the operation to monitor your service and returns the result of it
        /// </summary>
        /// <returns></returns>
        public abstract Task<TMonitor> MonitorAsync();
    }
}
